import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// T≈ô√≠da pro spr√°vu registru poji≈°tƒõnc≈Ø
class InsuranceRegistry {
    // Seznam v≈°ech poji≈°tƒõnc≈Ø (intern√≠ √∫lo≈æi≈°tƒõ v pamƒõti)
    private List<InsuredPerson> insuredPeople = new ArrayList<>();
    // N√°zev souboru pro ulo≈æen√≠ dat
    private final String FILE_NAME = "insured_data.txt";
    // Scanner pro ƒçten√≠ u≈æivatelsk√©ho vstupu
    private final Scanner scanner;

    // Konstruktor - p≈ôij√≠m√° Scanner pro pr√°ci s u≈æivatelsk√Ωm vstupem
    public InsuranceRegistry(Scanner scanner) {
        this.scanner = scanner;
    }

    // P≈ôid√°n√≠ nov√©ho poji≈°tƒõnce s kontrolou duplicit
    public void addPerson(InsuredPerson person) {
        // Ovƒõ≈ô√≠, zda poji≈°tƒõnec se stejn√Ωmi √∫daji ji≈æ neexistuje
        for (InsuredPerson p : insuredPeople) {
            if (p.getFirstName().equalsIgnoreCase(person.getFirstName()) &&
                    p.getLastName().equalsIgnoreCase(person.getLastName()) &&
                    p.getPhoneNumber().equals(person.getPhoneNumber())) {
                ConsoleUtils.printBoxedMessage("‚ö†Ô∏è Poji≈°tƒõn√Ω s tƒõmito √∫daji ji≈æ existuje.");
                return; // Pokud existuje, nov√©ho poji≈°tƒõnce nep≈ôid√°me
            }
        }
        // P≈ôid√°n√≠ poji≈°tƒõnce do seznamu
        insuredPeople.add(person);
        ConsoleUtils.printBoxedMessage("‚úÖ Poji≈°tƒõn√Ω √∫spƒõ≈°nƒõ p≈ôid√°n ");
    }

    // Editace √∫daj≈Ø poji≈°tƒõnce
    public void editPerson(String choice) {
        System.out.print("Zadejte hledanou hodnotu pro editaci a stisknƒõte ENTER: ");
        String value = scanner.nextLine().trim();

        // Vyhled√°n√≠ poji≈°tƒõnc≈Ø podle zadan√©ho krit√©ria
        List<InsuredPerson> matchingPeople = new ArrayList<>();
        for (InsuredPerson person : insuredPeople) {
            if ((choice.equals("1") && person.getFirstName().equalsIgnoreCase(value)) ||
                    (choice.equals("2") && person.getLastName().equalsIgnoreCase(value)) ||
                    (choice.equals("3") && String.valueOf(person.getBirthDate().getYear()).equals(value)) ||
                    (choice.equals("4") && person.getPhoneNumber().equals(value))) {
                matchingPeople.add(person);
            }
        }
        // Pokud ≈æ√°dn√Ω poji≈°tƒõnec nebyl nalezen, zobraz√≠ zpr√°vu
        if (matchingPeople.isEmpty()) {
            ConsoleUtils.printBoxedMessage("‚ùå Poji≈°tƒõn√Ω nenalezen.");
            return;
        }
        // V√Ωpis nalezen√Ωch poji≈°tƒõnc≈Ø
        System.out.println("---------------------------------------------------------------------------------");
        System.out.println("üîé Nalezen√≠ poji≈°tƒõnci:");
        System.out.println("------------------------------------");
        for (int i = 0; i < matchingPeople.size(); i++) {
            System.out.println((i + 1) + ". " + matchingPeople.get(i));
        }
        System.out.println("---------------------------------------------------------------------------------");


        System.out.print("Vyberte ƒç√≠slo osoby, kterou chcete upravit (nebo 0 pro zru≈°en√≠): ");
        int index;
        try {
            index = Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            ConsoleUtils.printBoxedMessage("‚ùå Neplatn√° volba.");
            return;
        }

        // Ovƒõ≈ôen√≠, zda u≈æivatel zvolil platnou osobu
        if (index == 0) {
            ConsoleUtils.printBoxedMessage("üö´ √öprava zru≈°ena.");
            return;
        }

        if (index < 1 || index > matchingPeople.size()) {
            ConsoleUtils.printBoxedMessage("‚ùå Neplatn√° volba.");
            return;
        }

        InsuredPerson personToEdit = matchingPeople.get(index - 1);

        // Editace jmena
        System.out.print("Zadejte nov√© jm√©no (Enter pro ponech√°n√≠ star√©ho): ");
        String newFirstName = scanner.nextLine().trim();
        if (!newFirstName.isEmpty()) {
            personToEdit.setLastName(ValidationUtils.formatName(newFirstName));
        }

        // Editace p≈ô√≠jmen√≠
        System.out.print("Zadejte nov√© p≈ô√≠jmen√≠ (Enter pro ponech√°n√≠ star√©ho): ");
        String newLastName = scanner.nextLine().trim();
        if (!newLastName.isEmpty()) {
            personToEdit.setLastName(ValidationUtils.formatName(newLastName));
        }

        // Editace telefonn√≠ho ƒç√≠sla s validac√≠
        while (true) {
            System.out.print("Zadejte nov√© telefonn√≠ ƒç√≠slo (Enter pro ponech√°n√≠ star√©ho): ");
            String newPhone = scanner.nextLine().trim();
            if (newPhone.isEmpty()) {
                break; // Ponech√°n√≠ star√©ho ƒç√≠sla
            }
            if (newPhone.matches("\\+?[0-9]{9,15}")) {
                personToEdit.setPhoneNumber(newPhone);
                break;
            } else {
                ConsoleUtils.printBoxedMessage("‚ùå Neplatn√© telefonn√≠ ƒç√≠slo! Zkuste to znovu.");
            }
        }

        // Ulo≈æen√≠ zmƒõn
        saveToFile();
        ConsoleUtils.printBoxedMessage("‚úÖ Poji≈°tƒõnec byl upraven.");
    }

    // Metoda pro vyhled√°n√≠ poji≈°tƒõnc≈Ø podle zvolen√©ho krit√©ria
    private List<InsuredPerson> findPeople(String choice) {
        // V√Ωzva k zad√°n√≠ hledan√© hodnoty
        System.out.print("Zadejte hledanou hodnotu a stisknƒõte ENTER: ");
        // Naƒçten√≠ vstupu od u≈æivatele, odstranƒõn√≠ mezer a p≈ôeveden√≠ na mal√° p√≠smena pro lep≈°√≠ porovn√°n√≠
        String value = scanner.nextLine().trim().toLowerCase();

        // Seznam nalezen√Ωch poji≈°tƒõnc≈Ø
        List<InsuredPerson> matchingPeople = new ArrayList<>();
        // Proch√°z√≠me v≈°echny poji≈°tƒõnce a hled√°me shodu podle zvolen√©ho krit√©ria
        for (InsuredPerson person : insuredPeople) {
            if ((choice.equals("1") && person.getFirstName().toLowerCase().contains(value)) ||
                    (choice.equals("2") && person.getLastName().toLowerCase().contains(value)) ||
                    (choice.equals("3") && String.valueOf(person.getBirthDate().getYear()).contains(value)) ||
                    (choice.equals("4") && person.getPhoneNumber().contains(value))) {
                matchingPeople.add(person); // P≈ôid√°n√≠ nalezen√©ho poji≈°tƒõnce do seznamu
            }
        }
        // Vr√°cen√≠ seznamu odpov√≠daj√≠c√≠ch poji≈°tƒõnc≈Ø
        return matchingPeople;
    }

    // Metoda pro vyhled√°n√≠ poji≈°tƒõnc≈Ø a jejich zobrazen√≠
    public void searchPerson(String choice) {
        // Pou≈æit√≠ metody `findPeople()` pro nalezen√≠ odpov√≠daj√≠c√≠ch poji≈°tƒõnc≈Ø
        List<InsuredPerson> matchingPeople = findPeople(choice);

        // Pokud nebyl nalezen ≈æ√°dn√Ω poji≈°tƒõnec, zobraz√≠ se zpr√°va a metoda se ukonƒç√≠
        if (matchingPeople.isEmpty()) {
            ConsoleUtils.printBoxedMessage("‚ùå Poji≈°tƒõn√Ω nenalezen.");
            return;
        }

        // V√Ωpis seznamu nalezen√Ωch poji≈°tƒõnc≈Ø
        System.out.println("---------------------------------------------------------------------------------");
        System.out.println("üîé Nalezen√≠ poji≈°tƒõnci:");
        System.out.println("------------------------------------");
        for (int i = 0; i < matchingPeople.size(); i++) {
            System.out.println((i + 1) + ". " + matchingPeople.get(i)); // ƒå√≠slovan√Ω seznam
        }
        System.out.println("---------------------------------------------------------------------------------");
    }

    // Metoda pro odstranƒõn√≠ poji≈°tƒõnce
    public void removePerson(String choice) {
        // Pou≈æit√≠ metody `findPeople()` pro nalezen√≠ odpov√≠daj√≠c√≠ch poji≈°tƒõnc≈Ø
        List<InsuredPerson> matchingPeople = findPeople(choice);

        // Pokud nebyl nalezen ≈æ√°dn√Ω poji≈°tƒõnec, zobraz√≠ se zpr√°va a metoda se ukonƒç√≠
        if (matchingPeople.isEmpty()) {
            ConsoleUtils.printBoxedMessage("‚ùå Poji≈°tƒõn√Ω nenalezen.");
            return;
        }

        // V√Ωpis seznamu nalezen√Ωch poji≈°tƒõnc≈Ø
        System.out.println("---------------------------------------------------------------------------------");
        System.out.println("üîé Nalezen√≠ poji≈°tƒõnci:");
        System.out.println("------------------------------------");
        for (int i = 0; i < matchingPeople.size(); i++) {
            System.out.println((i + 1) + ". " + matchingPeople.get(i)); // ƒå√≠slovan√Ω seznam
        }
        System.out.println("---------------------------------------------------------------------------------");

        // V√Ωzva k v√Ωbƒõru poji≈°tƒõnce k odstranƒõn√≠
        System.out.print("Zadejte ƒç√≠slo poji≈°tƒõnce, kter√©ho chcete odstranit (nebo 0 pro zru≈°en√≠) a stisknƒõte ENTER: ");
        int index;
        try {
            // P≈ôevod vstupu na ƒç√≠slo
            index = Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            ConsoleUtils.printBoxedMessage("‚ùå Neplatn√° volba.");
            return;
        }

        // Pokud u≈æivatel zadal 0, odstranƒõn√≠ se zru≈°√≠
        if (index == 0) {
            ConsoleUtils.printBoxedMessage("üö´ Odstranƒõn√≠ zru≈°eno.");
            return;
        }

        // Ovƒõ≈ôen√≠, zda u≈æivatel zadal platn√© ƒç√≠slo odpov√≠daj√≠c√≠ nalezen√Ωm poji≈°tƒõnc≈Øm
        if (index < 1 || index > matchingPeople.size()) {
            ConsoleUtils.printBoxedMessage("‚ùå Neplatn√° volba.");
            return;
        }

        // Z√≠sk√°n√≠ vybran√©ho poji≈°tƒõnce k odstranƒõn√≠
        InsuredPerson personToRemove = matchingPeople.get(index - 1);

        // Potvrzen√≠ odstranƒõn√≠
        System.out.print("‚ö†Ô∏è Opravdu chcete odstranit: " + personToRemove + "? (ano/ne): ");
        String confirmation = scanner.nextLine().trim().toLowerCase();

        if (confirmation.equals("ano")) {
            insuredPeople.remove(personToRemove); // Odstranƒõn√≠ poji≈°tƒõnce
            saveToFile(); // Ulo≈æen√≠ zmƒõn
            ConsoleUtils.printBoxedMessage("‚úÖ Poji≈°tƒõn√Ω byl √∫spƒõ≈°nƒõ odstranƒõn.");
        } else {
            ConsoleUtils.printBoxedMessage("üö´ Odstranƒõn√≠ zru≈°eno.");
        }
    }

    // Ulo≈æen√≠ seznamu poji≈°tƒõnc≈Ø do souboru
    public void saveToFile() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());  // P≈ôid√°n√≠ podpory pro LocalDate

        try {
            objectMapper.writeValue(new File(FILE_NAME), insuredPeople);
            ConsoleUtils.printBoxedMessage("‚úÖ Data byla ulo≈æena do souboru ve form√°tu JSON.");
        } catch (IOException e) {
            ConsoleUtils.printBoxedMessage("‚ùå Chyba p≈ôi ukl√°d√°n√≠: " + e.getMessage());
        }
    }

    // Naƒçten√≠ seznamu poji≈°tƒõnc≈Ø ze souboru
    public void loadFromFile() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());  // P≈ôid√°n√≠ podpory pro LocalDate

        try {
            File file = new File(FILE_NAME);
            if (!file.exists()) {
                ConsoleUtils.printBoxedMessage("‚ö†Ô∏è Soubor nenalezen. Bude vytvo≈ôen nov√Ω.");
                return;
            }
            insuredPeople = objectMapper.readValue(file, new TypeReference<List<InsuredPerson>>() {
            });
            ConsoleUtils.printBoxedMessage("‚úÖ Data byla naƒçtena ze souboru ve form√°tu JSON.");
        } catch (IOException e) {
            ConsoleUtils.printBoxedMessage("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠: " + e.getMessage());
        }
    }

    public List<InsuredPerson> getAllPeople() {
        return insuredPeople;
    }
}
